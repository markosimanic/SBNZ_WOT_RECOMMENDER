package rules;
dialect  "mvel"

import com.example.WoTRecommender.model.PlayerStatistics;
import com.example.WoTRecommender.model.Tank;
import com.example.WoTRecommender.model.User;
import java.util.List;
import com.example.WoTRecommender.repository.TankRepository;

declare Stats
    statistics: PlayerStatistics
    winRate: int
    tank : Tank
end

declare bestStats
    statistics: Stats
end

rule "Insert new statistics"
    when
        $ps : PlayerStatistics($wr: winRate, $t : userTank.getTank());
        not Stats($ps.getId() == statistics.getId())
    then
        insert(new Stats($ps, $ps.getWinRate(), $t));
end

rule "Get stats with most WR"
    when
        $u: User()
        $allStats : List($allStats.size>0) from collect(Stats());
        $stats: Stats() from $allStats;
        not Stats(winRate > $stats.getWinRate()) from $allStats;
    then
        modify($u){ setBestStatsTank($stats.getTank())}
        System.out.println($u.getBestStatsTank().getName());

end

rule "Recommend player to improve gameplay with tanks where avgDmg is under 1000"
  when
  $u : User($string : recommendationString)
  $stats : List() from collect(PlayerStatistics());
  Number(intValue >= 1) from accumulate(
  $s : PlayerStatistics(
         avgDamage < 1000
  )from $stats,
  count($s)
  )
  then
    modify($u) {setRecommendationString("You have 5 tanks with average damage lower than 1000, try to play them better!")}
end

//rule "Reccomend tank with most similarities with tank that user plays best"
//    when
//        $bestTank : bestStats($t : statistics.getTank()) // tank that user play best
//        $allTanks : List() from collect (Tank()) // all tanks in system
//        Number($value: intValue >= 1) from accumulate(
//
//        )
//    then
//
//        System.out.println($bestTank.statistics.getTank().getCharacteristics());
//end


