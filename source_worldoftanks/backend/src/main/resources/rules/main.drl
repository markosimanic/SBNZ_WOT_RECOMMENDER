package rules;
dialect  "mvel"

import com.example.WoTRecommender.model.User;
import com.example.WoTRecommender.model.UserCategory;
import com.example.WoTRecommender.model.Characteristics;
import com.example.WoTRecommender.model.PlayerStatistics;
import com.example.WoTRecommender.model.TankType;
import com.example.WoTRecommender.model.TankStatus;
import com.example.WoTRecommender.model.UserTank;
import com.example.WoTRecommender.model.Tank;
import java.util.List;

//------------------------------------------MATCH HISTORY RULES---------------------------------
declare Stats
    statistics: PlayerStatistics
    winRate: int
    tank : Tank
end

declare bestStats
    statistics: Stats
end

rule "Insert new statistics"
agenda-group "statistics"
    no-loop
    when
        $ps : PlayerStatistics($wr: winRate, $t : userTank.getTank());
        not Stats($ps.getId() == statistics.getId())
    then
        insert(new Stats($ps, $ps.getWinRate(), $t));
        System.out.println("Agenda group 'STATISTICS' : Statistics inserted");
end

rule "Get stats with most WR"
agenda-group "statistics"
    when
        $u: User()
        $allStats : List($allStats.size>0) from collect(Stats());
        $stats: Stats() from $allStats;
        not Stats(winRate > $stats.getWinRate()) from $allStats;
    then
        modify($u){ setBestStatsTank($stats.getTank())}
        System.out.println("Agenda group 'STATISTICS' : Found user's best tank:" + $u.getBestStatsTank().getName());
end

rule "Recommend player to improve gameplay with tanks where avgDmg is under 3000"
agenda-group "statistics"
  when
  $u : User($string : recommendationString)
  $stats : List() from collect(PlayerStatistics());
  Number(intValue >= 1) from accumulate(
  $s : PlayerStatistics(
         avgDamage < 3000
  )from $stats,
  count($s)
  )
  then
    modify($u) {setRecommendationString("INFO: We noticed that you have tanks with average damage lower than 3000, try to improve your gameplay!")}
    System.out.println("Agenda group 'STATISTICS' : Recommendation string modified");
end


//---------------------------------------------------------------------------------------------
//--------------------------------------DISCOUNTING RULES--------------------------------------

//chaining
rule "If user bougth thanks in value more than 100$, set user category to gold"
agenda-group "discounts"
salience 1000
   lock-on-active
    when
        $u: User(userCategory == UserCategory.NA, discount==false, paidmoney>=100)
    then
    	modify($u) {setUserCategory(UserCategory.GOLD)}
    	System.out.println("Agenda group 'DISCOUNTS' : User bought expensive tank, category set to GOLD ");

end

rule "If user have GOLD category, add 50$ to his account balance"
   agenda-group "discounts"
   lock-on-active
    when
        $u: User(userCategory == UserCategory.GOLD, paidmoney>=100,$bl : balance)
    then
        System.out.println("Agenda group 'DISCOUNTS': Added 50$ to GOLD user balance");
       	modify($u) {setBalance($bl+50) }
end

rule "Give 20% discount to user if he bought more than 2 PREMIUM tanks"
agenda-group "discounts"
   lock-on-active
  when $u : User($ownedTanks : tanks, $b:balance)
  $tanks : List() from collect(UserTank());
  Number(intValue >= 2) from accumulate(
  $t : UserTank(tank.tankStatus == TankStatus.PREMIUM)
  from $tanks,
  count($t)
  )
  then
    System.out.println("Agenda group 'DISCOUNTS': User bought more than 2 premium tanks, added 50$ to user balance");
    modify($u) {setBalance($b+50) , setDiscount(true) }
end

//-----------------------------------------------------------------------------------------------

//--------------------------------------USER CHARACTERISTICS PICK RULES--------------------------------------

rule "Recommend tank based on characteristics chosen by user"
agenda-group "playstyle"
    salience ($characteristics.size()/$value)
    no-loop
    when
        $t: Tank($name: name, $characteristics: characteristics)
        $u: User($user_characteristics: user_characteristics) // user characteristics pick
        Number($value: intValue >= 1) from accumulate(
        	Characteristics($c:this, this memberOf $characteristics) from $user_characteristics,
        	count($c)
        )
    then
    	System.out.println("Number of tank characteristics that match your choice: " + $value + "/" + $characteristics.size());
    	System.out.println("Final tank:" + $t);
    	modify($u) { setCurrentTank($t) }
    	System.out.println("Agenda group 'PLAYSTYLE': User got his tank recommendation based on chosen characteristics");
end

//-----------------------------------------------------------------------------------------------------------
